#include<iostream>
#include<fstream>
#include<queue>
#include<vector>
#include<sstream>

using namespace std;

class A{
public:
	unsigned int operator() (int j){
		unsigned int ret = i[j>>1];
		ret = (j&1) ? ret&((1<<16)-1) : (ret&(((1<<16)-1)<<16))>>16;
		ret += ((r&(1<<(31-j)))>>(31-j))<<16;
		return ret;
	}
	void operator() (int j, int num){
		r = (num>>16) ? r|(1<<(31-j)) : r&(~0-(1<<(31-j)));
		i[j>>1] = (j&1) ? i[j>>1]&(((1<<16)-1)<<16) | num&((1<<16)-1) : i[j>>1]&((1<<16)-1) | (num&((1<<16)-1))<<16;
	}
	bool operator[] (int j){
		return (b&(1<<(31-j))>>(31-j)) ? true : false;
	}
	void operator() (int j, bool num){
		b = (num) ? b|(1<<(31-j)) : b&(~0-(1<<(31-j)));
	}
private:
	unsigned int i[16] = {0};
	unsigned int r = 0, b = 0;
};

int m(vector<vector<A> >& M, vector<int>& E, int i, int j){
	if(i >= j) return 0;
	unsigned short q = (j-i)>>5, r = (j-i)&((1<<5)-1);
	unsigned int k = E[j];
	if(M[i][q][r]) return M[i][q](r);
	cout << i << ", " << j << '\n';
	cout << ((j-i)>>5) << ", " << ((j-i)&((1<<5)-1)) << '\n';
	if(k == i)
		M[i][q](r, m(M, E, i+1, j-1)+1);
	else if(k > j || k < i)
		M[i][q](r, m(M, E, i, j-1));
	else{
		int u = m(M, E, i, j-1), v = m(M, E, i, k-1) + m(M, E, k+1, j-1)+1;
		if(u < v) M[i][q](r, v);
		else M[i][q](r, u);
	}
	M[i][q](r, true);
	return M[i][q](r);
}

int _type(vector<vector<A> >& M, vector<int>& E, int i, int j){
	int max = 0, k = E[j];
	if(k == i)	return 0;
	else		max = m(M, E, i, j-1);
	if(k>i && k<j && m(M, E, i, k-1)+m(M, E, k+1, j-1)+1 > max) return 2;
	return 1;
}

int main(int argc, char* argv[]) {
    
	if(argc != 3) return 0;
    fstream fin(argv[1]);
    fstream fout;
    fout.open(argv[2], ios::out);
	
	int n, i, j;
	fin >> n;
	vector<int> E(n, 0), chosen(n, 0);
	vector<vector<A> > M(n, vector<A>());
	for(i = 0; i < n; i++){
		M[i].resize(((n-i)>>5)+1);
		for(j = 0; j < ((n-i)>>5)+1; j++){
			M[i][j] = A();
			for(int k = 0; k < 32; k++){
				M[i][j](k, false);
			}
		}
	}
	while(fin >> i >> j){
		E[i] = j;
		E[j] = i;
	}

	m(M, E, 0, n-1);
	
	queue<int> trace;
	trace.push(0);
	trace.push(n-1);
	while(!trace.empty()){
		i = trace.front();
		trace.pop();
		j = trace.front();
		trace.pop();
		if(_type(M,E,i,j)==0){
			if(m(M,E,i+1,j-1)){
				trace.push(i+1);
				trace.push(j-1);
			}
			chosen[i] = j;
			chosen[j] = i;
		}
		else if(_type(M,E,i,j)==1){
			if(m(M,E,i,j-1)){
				trace.push(i);
				trace.push(j-1);
			}
		}
		else{
			if(m(M,E,i,E[j]-1)){
				trace.push(i);
				trace.push(E[j]-1);
			}
			if(m(M,E,E[j]+1,j-1)){
				trace.push(E[j]+1);
				trace.push(j-1);
			}
			chosen[j] = E[j];
			chosen[E[j]] = j;
		}
	}

	stringstream ss;
	j = 0;
	for(i = 0; i < n; i++){
		if(chosen[i]) {
			ss << i << ' ' << chosen[i] << '\n';
			j++;
			chosen[chosen[i]] = 0;
		}
	}
	fout << j << '\n';
	fout << ss.str();
}
